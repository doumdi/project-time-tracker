name: Create Draft Release

on:
  push:
    branches: [main]

  workflow_dispatch:

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    outputs:
      should_release: ${{ steps.check_commits.outputs.has_commits == 'true' && steps.check_tag.outputs.exists == 'false' }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Read version from version.json
        id: version
        run: |
          if [ ! -f version.json ]; then
            echo "Error: version.json not found"
            exit 1
          fi

          MAJOR=$(jq -r '.major' version.json)
          MINOR=$(jq -r '.minor' version.json)
          MICRO=$(jq -r '.micro' version.json)

          if [ "$MAJOR" = "null" ] || [ "$MINOR" = "null" ] || \
             [ "$MICRO" = "null" ]; then
            echo "Error: Invalid version format in version.json"
            exit 1
          fi

          VERSION="v${MAJOR}.${MINOR}.${MICRO}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" \
             >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ steps.version.outputs.version }} does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for new commits since last tag
        id: check_commits
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "has_commits=true" >> $GITHUB_OUTPUT
          else
            COMMIT_COUNT=$(git rev-list ${LATEST_TAG}..HEAD --count)
            if [ "$COMMIT_COUNT" -gt 0 ]; then
              echo "Found $COMMIT_COUNT new commits since $LATEST_TAG"
              echo "has_commits=true" >> $GITHUB_OUTPUT
            else
              echo "No new commits since $LATEST_TAG"
              echo "has_commits=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate changelog
        id: changelog
        if: |
          steps.check_tag.outputs.exists == 'false' &&
          steps.check_commits.outputs.has_commits == 'true'
        run: |
          # Get the latest tag (if any)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Generating changelog since tag: $LATEST_TAG"
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD \
              --pretty=format:"- %s (%h)" --reverse)
          fi

          # Create changelog content
          {
            echo "# Changes in ${{ steps.version.outputs.version }}"
            echo ""
            if [ -n "$CHANGELOG" ]; then
              echo "$CHANGELOG"
            else
              echo "- No changes since last release"
            fi
            echo ""
            echo "## Distribution Packages"
            echo ""
            echo "### Windows"
            echo "- **Installer**: \`Project Time Tracker Setup ${{ steps.version.outputs.version }}.exe\`"
            echo ""
            echo "### macOS"
            echo "- **App Bundle**: \`Project Time Tracker-${{ steps.version.outputs.version }}.dmg\`"
            echo ""
            echo "### Linux"
            echo "- **AppImage**: \`Project Time Tracker-${{ steps.version.outputs.version }}.AppImage\`"
            echo ""
            echo "## Source Code"
            echo ""
            echo "- **Source Archive**: \`project-time-tracker-${{ steps.version.outputs.version }}-source.zip\`"
            echo "- **GitHub automatically provides**: \`Source code (zip)\` and \`Source code (tar.gz)\`"
          } > changelog.md

      - name: Create source archive
        if: |
          steps.check_tag.outputs.exists == 'false' &&
          steps.check_commits.outputs.has_commits == 'true'
        run: |
          # Create source archive excluding .git and node_modules
          zip -r "project-time-tracker-${{ steps.version.outputs.version }}-source.zip" . \
            -x "*.git*" \
            -x "*node_modules*" \
            -x "*.DS_Store*" \
            -x "*dist/*" \
            -x "*build/*" \
            -x "*.log"

      - name: Create tag and draft release
        if: |
          steps.check_tag.outputs.exists == 'false' &&
          steps.check_commits.outputs.has_commits == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.version.outputs.version }}" \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes-file changelog.md \
            --draft \
            --target main \
            "project-time-tracker-${{ steps.version.outputs.version }}-source.zip"

  build-and-upload:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install libudev dev files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build distribution packages
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Find and upload distribution files
          if [ "$RUNNER_OS" = "Windows" ]; then
            find dist -name "*.exe" -type f | while read file; do
              echo "Uploading Windows installer: $file"
              gh release upload "$VERSION" "$file" --clobber
            done
          elif [ "$RUNNER_OS" = "macOS" ]; then
            find dist -name "*.dmg" -type f | while read file; do
              echo "Uploading macOS package: $file"
              gh release upload "$VERSION" "$file" --clobber
            done
          elif [ "$RUNNER_OS" = "Linux" ]; then
            find dist -name "*.AppImage" -type f | while read file; do
              echo "Uploading Linux AppImage: $file"
              gh release upload "$VERSION" "$file" --clobber
            done
          fi